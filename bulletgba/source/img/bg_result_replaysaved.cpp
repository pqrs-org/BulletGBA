/*
Bmp 4/8 Bits to GBA Converter By Bruno Vedder.
With modifications by Pete Elmore.
bg/bg_result_replaysaved.bmp Opened.
Bmp signature found.
Bmp width: 16
Bmp height: 80
Bmp not compressed: ok.
One plane.
Bmp is 4 Bit per pixel.
16 colors used. (0 mean full bpp).
Bmp data starts at 76h.
Allocating 640 bytes.
CMAP loaded.
Data loaded. */
namespace TILEINFO_bg_result_replaysaved {
  enum {
    w = 2,
    h = 10,
    size = 20,
  };
  const unsigned short palette[] = {
    0x3e0,0x23,0x24,0x89,0xaa,0x111,0x132,0x155,0x177,0x178,0x199,0x1ba,0x1bc,0x1fe,0x1ff,0x1ff,
    };

  const unsigned char img[] = {

    // Tile [0 , 0] 
    0x0,0x0,0x0,0x0,
    0x0,0x0,0xf0,0xff,
    0x0,0x0,0xc0,0xfc,
    0x0,0x0,0x0,0xf0,
    0x0,0x0,0x0,0xf0,
    0x0,0x0,0xf0,0xcf,
    0x0,0x0,0xc0,0x8c,
    0x0,0x0,0x0,0x0,
    
    // Tile [1 , 0] 
    0x0,0x0,0x0,0x0,
    0xff,0xff,0x0,0x0,
    0xcd,0xfd,0x0,0x0,
    0x7,0xf7,0x0,0x0,
    0x7,0xf7,0x0,0x0,
    0xf4,0xff,0x0,0x0,
    0xc3,0xcc,0x0,0x0,
    0x0,0x0,0x0,0x0,
    
    // Tile [0 , 1] 
    0x0,0x0,0xf0,0xff,
    0x0,0x0,0xf0,0xed,
    0x0,0x0,0xf0,0xc7,
    0x0,0x0,0xf0,0xc7,
    0x0,0x0,0xf0,0xd7,
    0x0,0x0,0xc0,0xb6,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    
    // Tile [1 , 1] 
    0xff,0x0,0x0,0x0,
    0xfd,0x0,0x0,0x0,
    0xf7,0x0,0x0,0x0,
    0xf7,0x0,0x0,0x0,
    0xff,0x0,0x0,0x0,
    0xcc,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    
    // Tile [0 , 2] 
    0x0,0xf0,0xff,0xff,
    0x0,0xc0,0xfc,0xcd,
    0x0,0x0,0xf0,0x7,
    0x0,0x0,0xf0,0x7,
    0x0,0x0,0xf0,0xff,
    0x0,0x0,0xc0,0xcc,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0xf0,0xff,
    
    // Tile [1 , 2] 
    0xff,0x0,0x0,0x0,
    0xfd,0x0,0x0,0x0,
    0xf7,0x0,0x0,0x0,
    0xf7,0x0,0x0,0x0,
    0xff,0x0,0x0,0x0,
    0xcc,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0xff,0xff,0x0,0x0,
    
    // Tile [0 , 3] 
    0x0,0x0,0xf0,0xcd,
    0x0,0x0,0xa0,0x5,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0xf0,0xff,
    0x0,0x0,0xf0,0xdd,
    0x0,0x0,0xf0,0x77,
    0x0,0x0,0xf0,0x77,
    0x0,0x0,0xf0,0xff,
    
    // Tile [1 , 3] 
    0xcc,0xcc,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0xf,0x0,0x0,0x0,
    0xf,0x0,0x0,0x0,
    0xf,0x0,0x0,0x0,
    0xf,0x0,0x0,0x0,
    0xff,0x0,0x0,0x0,
    
    // Tile [0 , 4] 
    0x0,0x0,0xc0,0xcc,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0xf0,0xff,
    0x0,0x10,0xf0,0xcd,
    0x0,0xc0,0xf0,0x7,
    0x0,0xc0,0xf0,0x7,
    0x0,0xf0,0xff,0xff,
    
    // Tile [1 , 4] 
    0xcc,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0xff,0x0,0x0,0x0,
    0xcc,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0xff,0x0,0x0,0x0,
    
    // Tile [0 , 5] 
    0x0,0xc0,0xcc,0xcc,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0xf0,0x77,
    0x0,0x0,0xf0,0x77,
    0x0,0x0,0xf0,0x77,
    0x0,0x0,0xf0,0x77,
    0x0,0x0,0xf0,0xff,
    0x0,0x0,0xc0,0xcc,
    
    // Tile [1 , 5] 
    0xcc,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0xff,0xff,0x0,0x0,
    0xcf,0xfd,0x0,0x0,
    0xf,0xf7,0x0,0x0,
    0xf,0xf7,0x0,0x0,
    0xf,0xf7,0x0,0x0,
    0xc,0xc6,0x0,0x0,
    
    // Tile [0 , 6] 
    0x0,0x0,0x0,0x0,
    0x0,0x0,0xf0,0xff,
    0x0,0x0,0xf0,0xdd,
    0x0,0x0,0xf0,0x77,
    0x0,0x0,0xf0,0x77,
    0x0,0x0,0xf0,0xff,
    0x0,0x0,0xc0,0xcc,
    0x0,0x0,0x0,0x0,
    
    // Tile [1 , 6] 
    0x0,0x0,0x0,0x0,
    0xf,0x0,0x0,0x0,
    0xf,0x0,0x0,0x0,
    0xf,0x0,0x0,0x0,
    0xf,0x0,0x0,0x0,
    0xff,0x0,0x0,0x0,
    0xcc,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    
    // Tile [0 , 7] 
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0xf0,
    0x0,0x0,0x0,0xf0,
    0x0,0x0,0xf0,0xf,
    0x0,0x0,0xc0,0x2c,
    0x0,0x0,0x0,0xf0,
    0x0,0x0,0x0,0x90,
    0x0,0x0,0x0,0x0,
    
    // Tile [1 , 7] 
    0x0,0x0,0x0,0x0,
    0xff,0x0,0x0,0x0,
    0xff,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x22,0x0,0x0,0x0,
    0xff,0x0,0x0,0x0,
    0x99,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    
    // Tile [0 , 8] 
    0x0,0x0,0xf0,0xff,
    0x0,0x0,0xf0,0xed,
    0x0,0x0,0xf0,0xc7,
    0x0,0x0,0xf0,0xc7,
    0x0,0x0,0xf0,0xd7,
    0x0,0x0,0xc0,0xb6,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    
    // Tile [1 , 8] 
    0xff,0x0,0x0,0x0,
    0xfd,0x0,0x0,0x0,
    0xf7,0x0,0x0,0x0,
    0xf7,0x0,0x0,0x0,
    0xff,0x0,0x0,0x0,
    0xcc,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    
    // Tile [0 , 9] 
    0x0,0x0,0xf0,0xff,
    0x0,0x0,0xf0,0xcd,
    0x0,0x0,0xf0,0x7,
    0x0,0x0,0xf0,0x7,
    0x0,0x0,0xf0,0xff,
    0x0,0x0,0xc0,0xcc,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    
    // Tile [1 , 9] 
    0xff,0x0,0x0,0x0,
    0xfd,0x0,0x0,0x0,
    0xf7,0x0,0x0,0x0,
    0xf7,0x0,0x0,0x0,
    0xff,0xff,0x0,0x0,
    0xcc,0xcc,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
      };
  inline u16 *copyImage(u16 *vram) {
    for (u32 i = 0; i < sizeof(img) / 2; ++i) {
      *vram++ = img[i * 2] | (img[i * 2 + 1] << 8);
    }
    return vram;
  }
  inline u16 *copyPalette(u16 *pal) {
    for (u32 i = 0; i < sizeof(palette) / 2; ++i) {
      *pal++ = palette[i];
    }
    return pal;
  }
};
