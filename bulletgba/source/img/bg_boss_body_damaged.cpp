/*
Bmp 4/8 Bits to GBA Converter By Bruno Vedder.
With modifications by Pete Elmore.
bg/bg_boss_body_damaged.bmp Opened.
Bmp signature found.
Bmp width: 80
Bmp height: 32
Bmp not compressed: ok.
One plane.
Bmp is 4 Bit per pixel.
0 colors used. (0 mean full bpp).
Bmp data starts at 76h.
Allocating 1280 bytes.
CMAP loaded.
Data loaded. */
namespace TILEINFO_bg_boss_body_damaged {
  enum {
    w = 10,
    h = 4,
    size = 40,
  };
  const unsigned short palette[] = {
    0x3e0,0x842,0xc63,0x14a5,0x1ce7,0x2529,0x2d6b,0x35ad,0x39ce,0x4210,0x4a52,0x5294,0x5ad6,0x5ef7,0x6739,0x7fff,
    };

  const unsigned char img[] = {

    // Tile [0 , 0] 
    0x11,0x11,0x11,0x11,
    0x33,0x33,0x33,0x33,
    0x55,0x55,0x55,0x55,
    0x77,0x77,0x57,0x77,
    0x99,0x99,0x59,0x99,
    0xbb,0xbb,0x5b,0xbb,
    0xdd,0xdd,0x5d,0xdd,
    0xff,0xff,0x5f,0xff,
    
    // Tile [1 , 0] 
    0x11,0x11,0x11,0x11,
    0x33,0x33,0x33,0x33,
    0x55,0x55,0x55,0x55,
    0x77,0x77,0x77,0x77,
    0x99,0x99,0x99,0x99,
    0xbb,0xbb,0xbb,0xbb,
    0xdd,0xdd,0xdd,0xdd,
    0xff,0xff,0xff,0xff,
    
    // Tile [2 , 0] 
    0x11,0x11,0x11,0x11,
    0x33,0x33,0x33,0x33,
    0x55,0x55,0x55,0x55,
    0x77,0x77,0x77,0x77,
    0x99,0x99,0x99,0x99,
    0xbb,0xbb,0xbb,0xbb,
    0xdd,0xdd,0xdd,0xdd,
    0xff,0xff,0xff,0xff,
    
    // Tile [3 , 0] 
    0x11,0x11,0x11,0x11,
    0x33,0x33,0x33,0x33,
    0x55,0x55,0x55,0x55,
    0x77,0x77,0x57,0x77,
    0x99,0x99,0x59,0x99,
    0xbb,0xbb,0x5b,0xbb,
    0xdd,0xdd,0x5d,0xdd,
    0xff,0xff,0x5f,0xff,
    
    // Tile [4 , 0] 
    0x11,0x11,0x11,0x11,
    0x33,0x33,0x33,0x33,
    0x55,0x55,0x55,0x55,
    0x77,0x77,0x77,0x77,
    0x99,0x99,0x99,0x99,
    0xbb,0xbb,0xbb,0xbb,
    0xdd,0xdd,0xdd,0xdd,
    0xff,0xff,0xff,0xff,
    
    // Tile [5 , 0] 
    0x11,0x11,0x11,0x11,
    0x33,0x33,0x33,0x33,
    0x55,0x55,0x55,0x55,
    0x77,0x77,0x77,0x77,
    0x99,0x99,0x99,0x99,
    0xbb,0xbb,0xbb,0xbb,
    0xdd,0xdd,0xdd,0xdd,
    0xff,0xff,0xff,0xff,
    
    // Tile [6 , 0] 
    0x11,0x11,0x11,0x11,
    0x33,0x33,0x33,0x33,
    0x55,0x55,0x55,0x55,
    0x77,0x77,0x77,0x77,
    0x99,0x99,0x99,0x99,
    0xbb,0xbb,0xbb,0xbb,
    0xdd,0xdd,0xdd,0xdd,
    0xff,0xff,0xff,0xff,
    
    // Tile [7 , 0] 
    0x11,0x11,0x11,0x11,
    0x33,0x33,0x33,0x33,
    0x55,0x55,0x55,0x55,
    0x77,0x77,0x57,0x77,
    0x99,0x99,0x59,0x99,
    0xbb,0xbb,0x5b,0xbb,
    0xdd,0xdd,0x5d,0xdd,
    0xff,0xff,0x5f,0xff,
    
    // Tile [8 , 0] 
    0x11,0x11,0x11,0x11,
    0x33,0x33,0x33,0x33,
    0x55,0x55,0x55,0x55,
    0x77,0x77,0x77,0x77,
    0x99,0x99,0x99,0x99,
    0xbb,0xbb,0xbb,0xbb,
    0xdd,0xdd,0xdd,0xdd,
    0xff,0xff,0xff,0xff,
    
    // Tile [9 , 0] 
    0x11,0x11,0x11,0x11,
    0x33,0x33,0x33,0x33,
    0x55,0x55,0x55,0x55,
    0x77,0x77,0x75,0x57,
    0x99,0x99,0x95,0x59,
    0xbb,0xbb,0xb5,0x5b,
    0xdd,0xdd,0xd5,0x5d,
    0xff,0xff,0xf5,0x5f,
    
    // Tile [0 , 1] 
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0x55,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    
    // Tile [1 , 1] 
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0x55,0x55,0x55,0x55,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    
    // Tile [2 , 1] 
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0x55,0x55,0x55,0x55,
    0xf5,0xff,0xff,0xff,
    0xf5,0xff,0xff,0xff,
    0xf5,0xff,0xff,0xff,
    0xf5,0xff,0xff,0xff,
    
    // Tile [3 , 1] 
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0x55,
    0xff,0xff,0x5f,0xff,
    0x55,0x55,0x55,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    
    // Tile [4 , 1] 
    0xff,0xff,0xff,0xff,
    0x55,0x55,0x55,0x55,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    
    // Tile [5 , 1] 
    0xff,0xff,0xff,0xff,
    0x55,0x55,0x55,0x55,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    
    // Tile [6 , 1] 
    0xff,0xff,0xff,0xff,
    0x55,0xf5,0xff,0xff,
    0xff,0xf5,0xff,0xff,
    0xff,0xf5,0xff,0xff,
    0xff,0xf5,0xff,0xff,
    0xff,0xf5,0xff,0xff,
    0xff,0xf5,0xff,0xff,
    0xff,0xf5,0xff,0xff,
    
    // Tile [7 , 1] 
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0x55,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    
    // Tile [8 , 1] 
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0x55,0x55,0x55,0x55,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    
    // Tile [9 , 1] 
    0xff,0xff,0xf5,0x5f,
    0xff,0xff,0xf5,0x5f,
    0xff,0xff,0xf5,0x5f,
    0xff,0xff,0xf5,0x5f,
    0xff,0xff,0xf5,0x5f,
    0x55,0x55,0x55,0x55,
    0xff,0xff,0xf5,0xff,
    0xff,0xff,0xf5,0xff,
    
    // Tile [0 , 2] 
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0x55,
    
    // Tile [1 , 2] 
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0x55,0x55,0x55,0x55,
    
    // Tile [2 , 2] 
    0xf5,0xff,0xff,0xff,
    0xf5,0xff,0xff,0xff,
    0xf5,0xff,0xff,0xff,
    0x55,0x55,0x55,0x55,
    0xf5,0xff,0xff,0xff,
    0xf5,0xff,0xff,0xff,
    0xf5,0xff,0xff,0xff,
    0xf5,0xff,0xff,0xff,
    
    // Tile [3 , 2] 
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0x55,0x55,0x55,0x55,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    
    // Tile [4 , 2] 
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0x55,0x55,0x55,0x55,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    
    // Tile [5 , 2] 
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0x55,0x55,0x55,0x55,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    
    // Tile [6 , 2] 
    0xff,0xf5,0xff,0xff,
    0xff,0xf5,0xff,0xff,
    0xff,0xf5,0xff,0xff,
    0x55,0x55,0x55,0x55,
    0xff,0xf5,0xff,0xff,
    0xff,0xf5,0xff,0xff,
    0xff,0xf5,0xff,0xff,
    0xff,0xf5,0xff,0xff,
    
    // Tile [7 , 2] 
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0x55,0x55,0x55,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    
    // Tile [8 , 2] 
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    
    // Tile [9 , 2] 
    0xff,0xff,0xf5,0xff,
    0xff,0xff,0xf5,0xff,
    0xff,0xff,0xf5,0xff,
    0xff,0xff,0xf5,0xff,
    0xff,0xff,0xf5,0xff,
    0xff,0xff,0xf5,0xff,
    0xff,0xff,0xf5,0xff,
    0xff,0xff,0xf5,0xff,
    
    // Tile [0 , 3] 
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xff,0xff,0x5f,0xff,
    0xdd,0xdd,0x5d,0xdd,
    0x99,0x99,0x59,0x99,
    0x66,0x66,0x56,0x66,
    0x44,0x44,0x44,0x44,
    0x22,0x22,0x22,0x22,
    
    // Tile [1 , 3] 
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xdd,0xdd,0xdd,0xdd,
    0x99,0x99,0x99,0x99,
    0x66,0x66,0x66,0x66,
    0x44,0x44,0x44,0x44,
    0x22,0x22,0x22,0x22,
    
    // Tile [2 , 3] 
    0xf5,0xff,0xff,0xff,
    0xf5,0xff,0xff,0xff,
    0xf5,0xff,0xff,0xff,
    0xd5,0xdd,0xdd,0xdd,
    0x95,0x99,0x99,0x99,
    0x65,0x66,0x66,0x66,
    0x44,0x44,0x44,0x44,
    0x22,0x22,0x22,0x22,
    
    // Tile [3 , 3] 
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xdd,0xdd,0xdd,0xdd,
    0x99,0x99,0x99,0x99,
    0x66,0x66,0x66,0x66,
    0x44,0x44,0x44,0x44,
    0x22,0x22,0x22,0x22,
    
    // Tile [4 , 3] 
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xdd,0xdd,0xdd,0xdd,
    0x99,0x99,0x99,0x99,
    0x66,0x66,0x66,0x66,
    0x44,0x44,0x44,0x44,
    0x22,0x22,0x22,0x22,
    
    // Tile [5 , 3] 
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xdd,0xdd,0xdd,0xdd,
    0x99,0x99,0x99,0x99,
    0x66,0x66,0x66,0x66,
    0x44,0x44,0x44,0x44,
    0x22,0x22,0x22,0x22,
    
    // Tile [6 , 3] 
    0xff,0xf5,0xff,0xff,
    0xff,0x55,0x55,0x55,
    0xff,0xf5,0xff,0xff,
    0xdd,0xd5,0xdd,0xdd,
    0x99,0x95,0x99,0x99,
    0x66,0x65,0x66,0x66,
    0x44,0x44,0x44,0x44,
    0x22,0x22,0x22,0x22,
    
    // Tile [7 , 3] 
    0xff,0xff,0x5f,0xff,
    0x55,0x55,0x55,0xff,
    0xff,0xff,0xff,0xff,
    0xdd,0xdd,0xdd,0xdd,
    0x99,0x99,0x99,0x99,
    0x66,0x66,0x66,0x66,
    0x44,0x44,0x44,0x44,
    0x22,0x22,0x22,0x22,
    
    // Tile [8 , 3] 
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,
    0xdd,0xdd,0xdd,0xdd,
    0x99,0x99,0x99,0x99,
    0x66,0x66,0x66,0x66,
    0x44,0x44,0x44,0x44,
    0x22,0x22,0x22,0x22,
    
    // Tile [9 , 3] 
    0xff,0xff,0xf5,0xff,
    0xff,0xff,0xf5,0xff,
    0xff,0xff,0xf5,0xff,
    0xdd,0xdd,0xd5,0xdd,
    0x99,0x99,0x95,0x99,
    0x66,0x66,0x65,0x66,
    0x44,0x44,0x44,0x44,
    0x22,0x22,0x22,0x22,
      };
  inline u16 *copyImage(u16 *vram) {
    for (u32 i = 0; i < sizeof(img) / 2; ++i) {
      *vram++ = img[i * 2] | (img[i * 2 + 1] << 8);
    }
    return vram;
  }
  inline u16 *copyPalette(u16 *pal) {
    for (u32 i = 0; i < sizeof(palette) / 2; ++i) {
      *pal++ = palette[i];
    }
    return pal;
  }
};
