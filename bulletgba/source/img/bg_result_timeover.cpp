/*
Bmp 4/8 Bits to GBA Converter By Bruno Vedder.
With modifications by Pete Elmore.
bg/bg_result_timeover.bmp Opened.
Bmp signature found.
Bmp width: 16
Bmp height: 64
Bmp not compressed: ok.
One plane.
Bmp is 4 Bit per pixel.
13 colors used. (0 mean full bpp).
Bmp data starts at 6ah.
Allocating 512 bytes.
CMAP loaded.
Data loaded. */
namespace TILEINFO_bg_result_timeover {
  enum {
    w = 2,
    h = 8,
    size = 16,
  };
  const unsigned short palette[] = {
    0x3e0,0x1020,0x3c80,0x48a0,0x54c0,0x5cc0,0x60c0,0x68e0,0x70e0,0x7900,0x7900,0x7d00,0x7d20,0x0,0x0,0x0,
};

  const unsigned char img[] = {

    // Tile [0 , 0] 
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0xcc,0xcc,
    
    // Tile [1 , 0] 
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x40,0xc,0x0,0x0,
    0x40,0xc,0x0,0x0,
    0xcc,0xc,0x0,0x0,
    
    // Tile [0 , 1] 
    0x0,0x0,0x88,0x88,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0xcc,0xcc,
    0x0,0x0,0x88,0x88,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0xcc,0xcc,
    
    // Tile [1 , 1] 
    0xa8,0xc,0x0,0x0,
    0x40,0xc,0x0,0x0,
    0x40,0xc,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x40,0xc,0x0,0x0,
    0x30,0x8,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    
    // Tile [0 , 2] 
    0x0,0x0,0x88,0xa8,
    0x0,0x0,0x0,0x40,
    0x0,0x0,0xcc,0xcc,
    0x0,0x0,0x88,0xa8,
    0x0,0x0,0x0,0x40,
    0x0,0x0,0xcc,0xcc,
    0x0,0x0,0x88,0x88,
    0x0,0x0,0x0,0x0,
    
    // Tile [1 , 2] 
    0xc,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    0x8,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    
    // Tile [0 , 3] 
    0x0,0x0,0x0,0x0,
    0x0,0x0,0xcc,0xcc,
    0x0,0x0,0xac,0xab,
    0x0,0x0,0x4c,0x48,
    0x0,0x0,0x4c,0x48,
    0x0,0x0,0x4c,0xc9,
    0x0,0x0,0x38,0x87,
    0x0,0x0,0x0,0x0,
    
    // Tile [1 , 3] 
    0x0,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    0x8,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    
    // Tile [0 , 4] 
    0x0,0x0,0x0,0x0,
    0x0,0x0,0xcc,0xcc,
    0x0,0x0,0xac,0x88,
    0x0,0x0,0x4c,0x0,
    0x0,0x0,0x4c,0x0,
    0x0,0x0,0xcc,0xcc,
    0x0,0x0,0x88,0x88,
    0x0,0x0,0x0,0x0,
    
    // Tile [1 , 4] 
    0x0,0x0,0x0,0x0,
    0xcc,0xc,0x0,0x0,
    0xa8,0xc,0x0,0x0,
    0x40,0xc,0x0,0x0,
    0x40,0xc,0x0,0x0,
    0xcc,0xc,0x0,0x0,
    0x88,0x8,0x0,0x0,
    0x0,0x0,0x0,0x0,
    
    // Tile [0 , 5] 
    0x0,0x0,0x0,0xcc,
    0x0,0x0,0x0,0xcc,
    0x0,0x0,0xcc,0x0,
    0x0,0x0,0x88,0x11,
    0x0,0x0,0x0,0xcc,
    0x0,0x0,0x0,0x66,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0xcc,0xcc,
    
    // Tile [1 , 5] 
    0xc,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x1,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    0x6,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    
    // Tile [0 , 6] 
    0x0,0x0,0xac,0xab,
    0x0,0x0,0x4c,0x48,
    0x0,0x0,0x4c,0x48,
    0x0,0x0,0x4c,0xc9,
    0x0,0x0,0x38,0x87,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0xcc,0xcc,
    
    // Tile [1 , 6] 
    0xc,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    0x8,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    
    // Tile [0 , 7] 
    0x0,0x0,0x88,0xa8,
    0x0,0x0,0x0,0x40,
    0x0,0x0,0x0,0x20,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    
    // Tile [1 , 7] 
    0xc,0x0,0x0,0x0,
    0xc,0x0,0x0,0x0,
    0x5,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
      };
  inline u16 *copyImage(u16 *vram) {
    for (u32 i = 0; i < sizeof(img) / 2; ++i) {
      *vram++ = img[i * 2] | (img[i * 2 + 1] << 8);
    }
    return vram;
  }
  inline u16 *copyPalette(u16 *pal) {
    for (u32 i = 0; i < sizeof(palette) / 2; ++i) {
      *pal++ = palette[i];
    }
    return pal;
  }
};
