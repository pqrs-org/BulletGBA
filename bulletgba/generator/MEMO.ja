■  コードジェネレータに関するメモ

【やること】
     BulletML → C++ への変換


【ポイント】
    ・  弾の制御はフレーム毎に呼ばれる step 関数で行う必要がある。
        (BulletML で記述されたデータを 1 フレーム毎の動作に分割する必要がある)。

    ・  ハードウェアの制約上、ヒープの使用は可能な限り避ける。
            □  fireRef の呼び出しについて <param> をヒープに置くのではなく、
                参照についてはコンバートの時点で総展開しておく。

            →  ヒープをまったく使用しない場合、以下の限界が生じるので注意。
                □  fireRef などの参照タグを用いる際に
                    それらの <param> に $rand が含まれていた場合、
                    展開先の $rand で毎回評価が行われる。 (本来は <param> で一度だけ評価すべき)。


【内部動作について】
    ・  内部で特別扱いするべきデータは以下。

            <changeSpeed>
            <changeDirection>
            <accel> (未実装)
            <repeat>
            <wait>

        changeSpeed, changeDirection については、パラレルで動作するため
        step 関数への分割が困難。
        repeat の内部で wait を挟む場合、 repeat の中身を 1 フレームで行うことが出来ないため、
        step 関数へのコンバートを工夫する必要がある。

    ・  changeSpeed, changeDirection, accel について。

        これらは各動作について value と life を設定し、
        各フレームにおいて life > 0 である間は value に基づいて速度や角度をいじる。

    ・  repeat, wait について

        単純な repeat (＝ wait を含まず、 1 フレームで処理可能) は、
        step 関数内部でループをさせれば良い。

        # repeat がネストしている場合を考慮し、ループ変数は工夫が必要。
        # 各 repeat に一意な ID を付加し、その ID をループ変数の名前として使う。


        wait を含む repeat の場合は、コードを「wait まで」「wait 以降」で分割し、
        それぞれを 1 フレームで処理する。
        実際問題として、以下のようなコードを処理することを考えると、
        もう少しコードを細かくわけて、 wait が設定されるまでは step 関数を処理し続けるという
        ロジックが必要である。

            --------------------------------------------------
            <action> 1 </action>
            <wait> 10 </wait>
            <action> 2 </action>

            # この場合、 <wait> の後は <action> 1, 2 が走る。
            # 単純にコード分割を行うと <action> 2 のみを実行しかねないので注意。
            --------------------------------------------------


        wait を含む repeat の具体例。

            --------------------------------------------------
            【case1】

            <repeat>
                <action 1>
                    <fire />
                    <repeat>
                        <action 2>
                            <fire />
                            <wait />
                        </action>
                    </repeat>
                </action>
            </repeat>

            --------------------------------------------------
            【case2】

            <repeat>
                <action 1>
                    <fire />
                    <repeat>
                        <action 2>
                            <fire />
                        </action>
                    </repeat>
                    <wait />
                </action>
            </repeat>
            --------------------------------------------------

        具体的な処理として、
            (1) wait を含まない repeat      →  一つのブロックとして認識する。
            (2) wait を含む repeat
                →  簡単な方法は repeat を展開してしまう。 その後にブロックを評価する。
                    (ただし repeat の回数に比例して処理も増加)。

        ちなみに、 repeat を事前に展開しておくとどれくらいになるのか?

        repeat に関係なく wait を含むブロックの処理は注意する。
        以下のような場合、 wait が終わらないと次に進んではいけない。
        wait については変に考えず、 wait 直後で step 関数分割を行うのが良い。
            --------------------------------------------------
            <wait>100</wait>
            <changeDirection>...</changeDirection>
            --------------------------------------------------


    ・  <fire> について

        <fire> が現われた際には、弾を生成して、(必要があれば) その弾に step 関数をアサインする。
        <fire> 以下の XML は <fire> 内で完結している。

    ・  <bullet> について

        <bullet> が出現するのは <fire> の直下のみ。
        bullet が存在する場合、 1 フレームで完結する処理ならば step 関数にしないほうが良い?

    ・  <action> について

        <action> が出現するのは <bullet>、<repeat>、<action> の下、および <bulletml> の直下のみ。
        <repeat> は <action> の下にしか現われないので、
        <action> は <bullet> の下にしか現われないとして良い。

        # <bulletml> 直下の <action> については特別扱いする。
        # トップレベルの <action> はラベルが top から始まるもの (ex "top", "top2", "top3"...) についてのみ、
        # <topFire> エレメントで被せてあける。

        <fire>、<bullet>、<action> と step 関数の生成に大きく干与するエレメントの
        順番は以下のようになるので、 step 関数分割は内側のノードである
        <action> → <bullet> → <fire> と行う。
        こうすることで効率的に同一コードの畳み込みが可能となる。
            --------------------------------------------------
            <fire>
                <bullet>
                    <action/>
                </bullet>
            </fire>
            --------------------------------------------------


    ・  <stepfunc> タグの挿入についてのイメージ (あんまり頑張って最適化しない)

        <action> の中を見ていく。
        <action> で最低一つは stepfunc を生成する。 (複数の action をまとめて一つの stepfunc にする最適化はしない)。

        →  bulletDef の中身は stepfuncCall のみになる。
            実際の動作は stepfuncDef に記述される。


    ・  生成する stepfunc の選別について

        <stepfunc> が <repeat> を含み、 その repeat が <wait> を含む場合、
        <stepfunc> は以下の形となる。

            --------------------------------------------------
            <stepfunc>
                <repeat>
                    <times>100</times>
                    <stepfuncCall label="xxx"/>
                    <stepfuncCall label="xxx"/>
                    <stepfuncCall label="xxx"/>
                    <stepfuncCall label="xxx"/>
                </repeat>
            </stepfunc>
            --------------------------------------------------

        この場合、外枠の <stepfunc> は呼ばずに直接内部の <stepfunc> を呼ぶほうが良い。
        そうすると外枠 <stepfunc> のコードは生成しないほうが良い。

        そのような処理を効率よく行うために事前に stepfuncCall の追いかけを行い、
        関数呼び出しの順番のリストを作成してから、 実際に呼ばれる関数の選別を
        リストを用いて行う。

        実装では gen-callingvectorfile.php でリストの作成を行い、
        関数コードの生成を gen-code.php で行う。



【その他メモ】

    ・  現在の実装だと、XML 一つ一つに対して、 static な stepfunc を生成しているが、
        本来は stepfunc を全ての bullet で共有すべき。

        ただし stepfunc 関数ごとにファイルに分割 (stepfunc_xxx.cpp のようなファイルに分割) すると、
        ファイルが膨大な数になって Makefile の SOURCES のリストが長すぎてビルド出来なくなる。

        →  以外と容量は減らずに 100KB くらい。
            stepfunc なんかを一つのファイルにまとめてソースコードが 2MB 越えとかしたときに、
            gcc の動きがバギーになる (生成バイナリがバグる) ので、意味がないどころか悪影響がある。

            一つだけ BulletML を修正したいときも、再コンパイルの対象が増えてしまったり、
            あんまりスマートではないので、 BulletML 毎にコードを生成するのが正解。 
